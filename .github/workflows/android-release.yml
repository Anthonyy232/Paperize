# ===================================================================
# Paperize CI/CD Pipeline
#
# Automates the testing, building, and release process for the Paperize Android application.
#
# Workflow Architecture:
#   1. Lint:   Acts as a quality gate by running static code analysis.
#   2. Build:  Compiles and signs the release APK if the lint check passes.
#   3. Release: Publishes the APK to a draft GitHub Release, but only for version tags.
#
# Triggering Conditions:
#   - On push to `main`:
#     - Executes the `lint` and `build` jobs.
#     - Produces a versioned build artifact for testing and internal distribution.
#   - On push of a tag (e.g., `v1.2.3`):
#     - Executes all jobs: `lint`, `build`, and `release`.
#     - Creates a formal, versioned draft release on GitHub with the signed APK attached.
# ===================================================================
name: Paperize CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
    tags: [ 'v*' ]

jobs:
  # ===================================================================
  # JOB: lint
  #
  # Validates code quality using the Android lint tool. This job serves as the
  # primary quality gate for the pipeline. The workflow will not proceed if
  # lint reports any errors.
  # ===================================================================
  lint:
    name: Run Lint Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository source code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - name: Grant execute permission for gradlew
        # The gradlew wrapper requires execute permissions to run on the Linux-based runner.
        run: chmod +x gradlew

      - name: Run Android Lint
        run: ./gradlew lint

  # ===================================================================
  # JOB: build
  #
  # Compiles, signs, and packages the release APK. This job is dependent on the
  # successful completion of the `lint` job. It produces a versioned artifact
  # that is used for both internal testing and the final release.
  # ===================================================================
  build:
    name: Build Signed APK
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout repository source code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Decode Base64 Keystore
        # Reconstructs the binary .jks keystore file from the Base64 encoded secret.
        env:
          SIGNING_KEYSTORE_BASE64: ${{ secrets.SIGNING_KEYSTORE_BASE64 }}
        run: |
          echo $SIGNING_KEYSTORE_BASE64 | base64 --decode > ${{ github.workspace }}/keystore.jks

      - name: Build Release APK
        env:
          SIGNING_KEYSTORE_PATH: ${{ github.workspace }}/keystore.jks
          SIGNING_KEY_ALIAS: ${{ secrets.SIGNING_KEY_ALIAS }}
          SIGNING_STORE_PASSWORD: ${{ secrets.SIGNING_STORE_PASSWORD }}
          SIGNING_KEY_PASSWORD: ${{ secrets.SIGNING_KEY_PASSWORD }}
        run: ./gradlew assembleRelease

      - name: Get Version Name
        # Determines the application version for artifact naming.
        # - For tag pushes (e.g., 'v1.2.3'), it uses the tag name directly.
        # - For main branch pushes, it parses the `versionName` from the app's build.gradle.kts file.
        id: get_version
        shell: bash
        run: |
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            VERSION_NAME=${GITHUB_REF_NAME}
          else
            RAW_VERSION=$(grep "versionName =" app/build.gradle.kts | awk -F'"' '{print $2}')
            VERSION_NAME="v${RAW_VERSION}"
          fi
          echo "VERSION_NAME=$VERSION_NAME" >> $GITHUB_OUTPUT

      - name: Upload APK as a build artifact
        # Archives the generated APK with a dynamic, versioned name. This artifact is essential
        # for passing the APK file to the subsequent `release` job.
        uses: actions/upload-artifact@v4
        with:
          name: paperize-${{ steps.get_version.outputs.VERSION_NAME }}
          path: app/build/outputs/apk/release/paperize-v*.apk
          if-no-files-found: error

  # ===================================================================
  # JOB: release
  #
  # Creates a draft GitHub Release and attaches the signed APK. This job is
  # conditional and will only execute for pushes that include a version tag.
  # ===================================================================
  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Download signed APK artifact
        # Downloads the versioned artifact produced by the `build` job. The pattern ensures
        # it finds the correct artifact regardless of the specific version number.
        uses: actions/download-artifact@v4
        with:
          pattern: paperize-v*
          path: ./apk-artifact
          merge-multiple: true

      - name: Create Draft Release
        # Publishes a new release to GitHub. `draft: true` ensures the release is not made
        # public until it has been manually reviewed and published.
        uses: softprops/action-gh-release@v2
        with:
          files: ./apk-artifact/paperize-v*.apk
          draft: true
          generate_release_notes: true
